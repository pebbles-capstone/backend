service: capstoneAPI

provider:
  name: aws
  stage: dev
  region: ca-central-1
  runtime: nodejs12.x
  timeout: 60 # optional, in seconds, default is 6
  memorySize: 1024 # optional, in MB, default is 1024
  tracing:
    lambda: true # optional, enables tracing for all functions (can be true (true equals 'Active') 'Active' or 'PassThrough')

  # TODO: change this to be custom to each lambda
  iam:
    role:
      statements:
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:ca-central-1:*:*"

functions:
  getUser:
    handler: dist/userService.getUser
    events:
      - http:
          path: user/{userId}
          method: GET
          cors: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:COGNITO_AUTH}
  updateUser:
    handler: dist/userService.updateUser
    events:
      - http:
          path: user/{userId}
          method: POST
          cors: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:COGNITO_AUTH}
      - http:
          path: user
          method: POST
          cors: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:COGNITO_AUTH}
  deleteUser:
    handler: dist/userService.deleteUser
    events:
      - http:
          path: user/{userId}
          method: DELETE
          cors: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:COGNITO_AUTH}

  getProjects:
    handler: dist/projectService.getProjects
    events:
      - http:
          path: projects/{projType}
          method: GET
          cors: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:COGNITO_AUTH}

  getRecs:
    handler: dist/recService.getRecs
    events:
      - http:
          path: recs/{userId}
          method: GET
          cors: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:COGNITO_AUTH}

resources:
  Resources:
    RecsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: RecsTable

    UserTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: UserTable

    ProjectTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ProjectTable

    ProfTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ProfTable
